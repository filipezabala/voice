% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_features.R
\name{extract_features}
\alias{extract_features}
\title{Extracts features from WAV audio files.}
\usage{
extract_features(directory, filesRange = NULL,
             features = c('f0','formants','zcr','rms','mhs',
             'gain','rfc,','ac','mfcc'),
             gender = 'u', windowShift = 5, numFormants = 8,
             numcep = 12, dcttype = c('t2', 't1', 't3', 't4'),
             fbtype = c('mel', 'htkmel', 'fcmel', 'bark'),
             resolution = 40, usecmp = FALSE,
             mc.cores = parallel::detectCores(), full.names = TRUE,
             recursive = FALSE, as.tibble = TRUE)
}
\arguments{
\item{\code{directory}}{A directory containing audio file(s) in WAV or MP3 formats. If more than one directory is provided, only the first one is used.}

\item{\code{filesRange}}{The desired range of directory files (default: \code{NULL}, i.e., all files).}

\item{\code{features}}{Vector of features to be extracted. (default: 'f0','formants','zcr','mhs','rms','gain','rfc','ac','mfcc'). The following four features contain 4*257 = 1028 columns (257 each): \code{'cep'}, \code{'dft'}, \code{'css'} and \code{'lps'}.}

\item{\code{gender}}{= <code>: set gender specific parameters where <code> = \code{'f'}[emale], \code{'m'}[ale] or \code{'u'}[nknown] (default: \code{'u'}). Used by \code{wrassp::ksvF0}, \code{wrassp::forest} and \code{wrassp::mhsF0}.}

\item{\code{windowShift}}{= <dur>: set analysis window shift to <dur>ation in ms (default: 5.0). Used by \code{wrassp::ksvF0}, \code{wrassp::forest}, \code{wrassp::mhsF0}, \code{wrassp::zcrana}, \code{wrassp::rfcana}, \code{wrassp::acfana}, \code{wrassp::cepstrum}, \code{wrassp::dftSpectrum}, \code{wrassp::cssSpectrum} and \code{wrassp::lpsSpectrum}.}

\item{\code{numFormants}}{= <num>: <num>ber of formants (default: 8). Used by \code{wrassp::forest}.}

\item{\code{numcep}}{Number of Mel-frequency cepstral coefficients (cepstra) to return (default: 12). Used by \code{tuneR::melfcc}.}

\item{\code{dcttype}}{Type of DCT used. \code{'t1'} or \code{'t2'}, \code{'t3'} for HTK \code{'t4'} for feacalc (default = \code{'t2'}). Used by \code{tuneR::melfcc}.}

\item{\code{fbtype}}{Auditory frequency scale to use: \code{'mel'}, \code{'bark'}, \code{'htkmel'}, \code{'fcmel'} (default: \code{'mel'}). Used by \code{tuneR::melfcc}.}

\item{\code{resolution}}{= <freq>: set FFT length to the smallest value which results in a frequency resolution of <freq> Hz or better (default: 40.0). Used by \code{wrassp::cssSpectrum}, \code{wrassp::dftSpectrum} and \code{wrassp::lpsSpectrum}.}

\item{\code{usecmp}.}{Logical. Apply equal-loudness weighting and cube-root compression (PLP instead of LPC) (default: \code{FALSE}). Used by \code{tuneR::melfcc}.}

\item{\code{mc.cores}}{Number of cores to be used in parallel processing. (default: \code{parallel::detectCores()})}

\item{\code{full.names}}{Logical. If \code{TRUE}, the directory path is prepended to the file names to give a relative file path. If \code{FALSE}, the file names (rather than paths) are returned. (default: \code{TRUE}) Used by \code{base::list.files}.}

\item{\code{recursive}}{Logical. Should the listing recurse into directories? (default: \code{FALSE}) Used by \code{base::list.files}.}
}
\description{
Extracts features from WAV audio files.
}
\examples{
library(voice)

# get path to audio file
path2wav <- list.files(system.file('extdata', package = 'wrassp'),
pattern <- glob2rx('*.wav'), full.names = TRUE)

# getting all the 1092 features
ef <- extract_features(dirname(path2wav), features = c('f0','formants',
'zcr','mhs','rms','gain','rfc','ac','cep','dft','css','lps','mfcc'))
dim(ef)
ef

# using the default, i.e., not using 'cep','dft','css' and 'lps' (4*257 = 1028 columns)
ef2 <- extract_features(dirname(path2wav))
dim(ef2)
ef2
table(ef2$file_name)

# limiting filesRange
ef3 <- extract_features(dirname(path2wav), filesRange = 3:6)
dim(ef3)
ef3
table(ef3$file_name)

library(ellipse)
library(RColorBrewer)

# calculating correlation of ef2
data <- cor(ef2[-1])

# pane with 100 colors using RcolorBrewer
my_colors <- brewer.pal(5, 'Spectral')
my_colors <- colorRampPalette(my_colors)(100)

# ordering the correlation matrix
ord <- order(data[1, ])
data_ord <- data[ord, ord]
plotcorr(data_ord , col=my_colors[data_ord*50+50] , mar=c(1,1,1,1))

# Principal Component Analysis (PCA)
(pc <- prcomp(ef2[-1], scale = T))
screeplot(pc, type = 'lines')

library(ggfortify)
autoplot(pc, data = ef2, colour = 'file_name', loadings = T, loadings.label = T)

library(pca3d)
pca3d(pc, group=ef2$file_name)
}
